import { Component, OnInit } from '@angular/core';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { UserManagementService } from 'src/app/AuthGuard/Authentication/UserManagementService';
import * as XLSX from 'xlsx';
import {
  ChartComponent,
  ApexAxisChartSeries,
  ApexChart,
  ApexXAxis,
  ApexDataLabels,
  ApexTitleSubtitle,
  ApexPlotOptions
} from 'ng-apexcharts';
import { ReportService } from '../report.service';
import autoTable from 'jspdf-autotable';

export type ChartOptions = {
  series: ApexAxisChartSeries;
  chart: ApexChart;
  xaxis: ApexXAxis;
  dataLabels: ApexDataLabels;
  title: ApexTitleSubtitle;
};

@Component({
  selector: 'app-hire-service-report',
  templateUrl: './hire-service-report.component.html',
  styleUrls: ['./hire-service-report.component.css']
})
export class HireServiceReportComponent implements OnInit {
  hireService: any[] = [];
  public chartOptions: Partial<ChartOptions> | any;
  reportGeneratedBy: string = '';
  reportGeneratedDate: string = '';

  constructor(private reportService: ReportService, private userManagementService: UserManagementService) {}

  ngOnInit(): void {
    this.reportGeneratedDate = this.getCurrentDateAndTime();
    this.getHireServiceReport();
    this.getCurrentUser(); 
  }

  getCurrentUser(): void {
    this.userManagementService.getUser().subscribe(
      (user) => {
        this.reportGeneratedBy = user.fullName; 
      },
      (error) => {
        console.error('Error fetching user details', error);
      }
    );
  }

  getCurrentDateAndTime(): string {
    const now = new Date();
    return now.toLocaleString();
  }

  getHireServiceReport() {
    this.reportService.getHireServiceReport().subscribe(
      (data: any[]) => {
        console.log('Data received:', data); // Log the data received for debugging
        this.hireService = data;
        this.generateChart(); // Call generateChart after data is received
      },
      (error) => {
        console.error('Error fetching hire service report', error);
      }
    );
  }

  generateChart() {
    this.chartOptions = {
      series: this.hireService.map(service => service.serviceCount), // Assuming serviceCount holds the numerical values
      chart: {
        type: 'pie',
        width: 380
      },
      labels: this.hireService.map(service => service.serviceName), // Assuming serviceName holds the labels
      dataLabels: {
        enabled: true
      },
      title: {
        text: 'Hire Service Report for 2024',
        align: 'center'
      },
      plotOptions: {
        pie: {
          dataLabels: {
            offset: 0,
            minAngleToShowLabel: 10
          }
        }
      },
      colors: ['#FF5733', '#33FF57', '#3357FF'] 
    };
  }
  
  exportToPDF(): void {
    const chartElement = document.getElementById('chart'); // Element for the chart
    const tableElement = document.getElementById('reportTable'); // Element for the table
    const date = new Date().toLocaleDateString();
    const generatedBy = this.reportGeneratedBy;

    if (chartElement && tableElement) {
        // Create a new jsPDF instance
        const pdf = new jsPDF('p', 'mm', 'a4');

        // Add the logo image
        const logoImg = new Image();
        logoImg.src = 'assets/images/Protea-logo.png'; // Path to the image
        logoImg.onload = () => {
            // Add the logo image to the PDF
            pdf.addImage(logoImg, 'PNG', 105 - 15, 10, 30, 30); // Centered image at top

            // Add the title below the image
            pdf.setFontSize(18);
            pdf.text('Hire Service Report', 105, 50, { align: 'center' });

            // Add date and generated by info
            pdf.setFontSize(12);
            pdf.text(`Date: ${date}`, 10, 60);
            pdf.text(`Generated by: ${generatedBy}`, 10, 65);

            // Capture the chart as an image using html2canvas
            html2canvas(chartElement, { scale: 2 }).then(chartCanvas => {
                const chartImgData = chartCanvas.toDataURL('image/png');
                const chartImgWidth = 190; // Width in mm (adjust according to your needs)
                const chartImgHeight = (chartCanvas.height * chartImgWidth) / chartCanvas.width; // Height in mm proportional to the chart's original aspect ratio
                pdf.addImage(chartImgData, 'PNG', 10, 70, chartImgWidth, chartImgHeight);

                // Add the table data using autoTable
                autoTable(pdf,{
                    startY: 80 + chartImgHeight, // Position to start the table after the chart
                    html: '#reportTable', // ID of the table element
                    useCss: true, // Optionally use styles from the HTML table
                    theme: 'striped', // Table theme, can be 'striped', 'grid', 'plain'
                    headStyles: { fillColor: [41, 128, 185] }, // Customize header style
                    styles: { cellPadding: 2, fontSize: 10 }, // Customize table cell styles
                    didDrawPage: (data) => {
                        // Add any additional content below the table
                        const additionalContent = document.getElementById('additionalContent');
                        if (additionalContent) {
                            pdf.setFontSize(12);
                            //pdf.text(additionalContent.textContent || '', 10, data.cursor.y + 10); // Position after the table
                        }
                    }
                });

                // Save the PDF
                pdf.save('HireServiceReport.pdf');
            }).catch(error => {
                console.error('Error generating chart canvas:', error);
            });
        };
    } else {
        console.error('Could not find chart or table element.');
    }
}
  exportToExcel(): void {
    const ws: XLSX.WorkSheet = XLSX.utils.table_to_sheet(document.getElementById('reportTable'));
    const wb: XLSX.WorkBook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'HireServiceReport');
  
    // Generate Excel file and trigger download
    XLSX.writeFile(wb, 'hire-service-report.xlsx');
  }
}
