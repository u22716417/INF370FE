import { Component, OnInit } from '@angular/core';
import { ReportService } from '../report.service';
import { NgApexchartsModule } from 'ng-apexcharts';
import jsPDF from 'jspdf';
import 'jspdf-autotable';
import html2canvas from 'html2canvas';
import * as XLSX from 'xlsx';
import {
  ChartComponent,
  ApexAxisChartSeries,
  ApexChart,
  ApexXAxis,
  ApexDataLabels,
  ApexTitleSubtitle
} from 'ng-apexcharts';
import { UserManagementService } from 'src/app/AuthGuard/Authentication/UserManagementService';
import autoTable from 'jspdf-autotable';

export type ChartOptions = {
  series: ApexAxisChartSeries;
  chart: ApexChart;
  xaxis: ApexXAxis;
  dataLabels: ApexDataLabels;
  title: ApexTitleSubtitle;
};

@Component({
  selector: 'app-sales-attendance-report',
  templateUrl: './sales-attendance-report.component.html',
  styleUrls: ['./sales-attendance-report.component.css']
})
export class SalesAttendanceReportComponent implements OnInit {
  salesAttendance: any[] = [];
  filteredSalesAttendance: any [] = [];
  public chartOptions: Partial<ChartOptions> | any;
  reportGeneratedDate: string = '';
  reportGeneratedBy: string = '';
  startDate: string | null = '';
  endDate: string | null  = '';
  serviceReport: any[] = [];
  filteredServiceReport: any[] = [];
  events: any[] = [];
  eventsfromDb: any[] = [];
  selectedEvent: string = '';

  constructor(private reportService: ReportService, private userManagementService: UserManagementService) {}

  ngOnInit(): void {
    this.getCurrentUser();
    this.reportGeneratedDate = this.getCurrentDateAndTime();
    this.getSalesAttendanceReport();
    this.events = [...this.getUniqueEventNames()];
  }

  getCurrentUser(): void {
    this.userManagementService.getUser().subscribe(
      (user) => {
        this.reportGeneratedBy = user.fullName; 
      },
      (error) => {
        console.error('Error fetching user details', error);
      }
    );
  }

  getCurrentDateAndTime(): string {
    const now = new Date();
    return now.toLocaleString();
  }

  getUniqueEventNames(): string[] {
    const eventNames = this.eventsfromDb.map(event => event.eventName);
    return [...new Set(eventNames)];
  }

  onEventChange(event: any) {
    this.selectedEvent = event.target.value;
    this.filterSalesAttendance();
  }

  exportToExcel(): void {
    const ws: XLSX.WorkSheet = XLSX.utils.table_to_sheet(document.getElementById('reportTable'));
    const wb: XLSX.WorkBook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'soldTicketsReport');
  
    // Generate Excel file and trigger download
    XLSX.writeFile(wb, 'sold-tickets-report.xlsx');
  }

  exportToPDF(): void {
    const chartElement = document.getElementById('chart');
    const tableElement = document.getElementById('reportTable');
    const date = new Date().toLocaleDateString();
    const generatedBy = this.reportGeneratedBy;
  
    if (chartElement && tableElement) {
        // Create a new jsPDF instance
        const pdf = new jsPDF('p', 'mm', 'a4');
  
        // Add the logo image
        const logoImg = new Image();
        logoImg.src = 'assets/images/Protea-logo.png';  // Path to the image
        logoImg.onload = () => {
            // Add the logo image to the PDF
            pdf.addImage(logoImg, 'PNG', 105 - 15, 10, 30, 30); // Centered image at top
  
            // Add the title below the image
            pdf.setFontSize(18);
            pdf.text('Ticket Sales Report', 105, 50, { align: 'center' });
  
            // Add date and generated by info
            pdf.setFontSize(12);
            pdf.text(`Date: ${date}`, 10, 60);
            pdf.text(`Generated by: ${generatedBy}`, 10, 65);
  
            // Capture the chart as an image using html2canvas
            html2canvas(chartElement, { scale: 2 }).then(chartCanvas => {
                const chartImgData = chartCanvas.toDataURL('image/png');
                const chartImgWidth = 190; // Width in mm (adjust according to your needs)
                const chartImgHeight = (chartCanvas.height * chartImgWidth) / chartCanvas.width; // Height in mm proportional to the chart's original aspect ratio
                pdf.addImage(chartImgData, 'PNG', 10, 70, chartImgWidth, chartImgHeight);
  
                // Add the table data using autoTable
                autoTable(pdf,{
                    startY: 80 + chartImgHeight,  // Position to start the table after the chart
                    html: '#reportTable',  // ID of the table element
                    useCss: true,  // Optionally use styles from the HTML table
                    theme: 'striped',  // Table theme, can be 'striped', 'grid', 'plain'
                    headStyles: { fillColor: [41, 128, 185] },  // Customize header style
                    styles: { cellPadding: 2, fontSize: 10 }  // Customize table cell styles
                });

                
  
                // Save the PDF
                pdf.save('TicketSalesReport.pdf');
            }).catch(error => {
                console.error('Error generating chart canvas:', error);
            });
        };
    } else {
        console.error('Could not find chart or table element.');
    }
  }

  getSalesAttendanceReport(): void {
    this.reportService.getSalesAttendanceReport().subscribe(
      (data: any[]) => {
        this.salesAttendance = data;
        console.log('Sales Attendance Data:', this.salesAttendance);
        this.generateChart();
      },
      (error) => {
        console.error('Error fetching sales attendance report', error);
      }
    );
  }

  filterSalesAttendance(): void {
    if (this.selectedEvent) {
      this.filteredSalesAttendance= this.salesAttendance.filter(report => report.eventName === this.selectedEvent);
    } else {
      this.filteredSalesAttendance = [...this.salesAttendance];
    }
    this.generateChart();
  }
  generateChart(): void {
    const eventNames = this.salesAttendance.map(item => item.EventName);
    const ticketsSold = this.salesAttendance.map(item => item.NumberOfTicketsSold);
    const attendanceCounts = this.salesAttendance.map(item => item.EventAttendanceCount);
  
    this.chartOptions = {
      series: [
        {
          name: 'Tickets Sold',
          data: ticketsSold
        },
        {
          name: 'Attendance Count',
          data: attendanceCounts
        },
      ],
      chart: {
        type: 'bar',
        height: 350
      },
      title: {
        text: 'Sales and Attendance Report',
        align: 'center'
      },
      xaxis: {
        categories: eventNames,
        title: {
          text: 'Events'
        }
      },
      dataLabels: {
        enabled: true
      },
      colors: ['#FF5733', '#33FF57'] 
    };
  }
  

  
}
