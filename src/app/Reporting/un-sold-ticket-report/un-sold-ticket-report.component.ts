import { Component, OnInit } from '@angular/core';
import { UserManagementService } from 'src/app/AuthGuard/Authentication/UserManagementService';
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';
import { ReportService } from '../report.service';
import {
  ApexChart,
  ApexXAxis,
  ApexTitleSubtitle,
  ApexDataLabels,
  ApexPlotOptions,
  ApexFill,
  ApexAxisChartSeries
} from 'ng-apexcharts';

export type ChartOptions = {
  series: ApexAxisChartSeries;
  chart: ApexChart;
  xaxis: ApexXAxis;
  title: ApexTitleSubtitle;
  dataLabels: ApexDataLabels;
  plotOptions: ApexPlotOptions;
  fill: ApexFill;
  yaxis?: any; // Add yaxis for labels
};

@Component({
  selector: 'app-un-sold-ticket-report',
  templateUrl: './un-sold-ticket-report.component.html',
  styleUrls: ['./un-sold-ticket-report.component.css']
})
export class UnSoldTicketReportComponent implements OnInit {
  ticketSales: any[] = [];
  public chartOptions: ChartOptions;
  currentUserFullName:string="";

  constructor(
    private ticketSalesReportService: ReportService,
    private userManagementService:UserManagementService
  
  ) {
    this.chartOptions = {
      series: [
        {
          name: "Unsold Tickets",
          data: []
        }
      ],
      chart: {
        type: "bar",
        height: 350
      },
      plotOptions: {
        bar: {
          horizontal: false
        }
      },
      dataLabels: {
        enabled: false
      },
      xaxis: {
        categories: [],
        title: {
          text: 'Events' 
        }
      },
      yaxis: {
        title: {
          text: 'Number of Tickets' 
        }
      },
      title: {
        text: "Report on Unsold Tickets by Event"
      },
      fill: {
        opacity: 1
      }
    };
  }

  ngOnInit(): void {
    this.fetchTicketSalesReport();
   this.getUserFullName();
    }
    getUserFullName(): void {
      this.userManagementService.getUser().subscribe(response => {
        this.currentUserFullName = response.fullName; // Set the full name
      }, error => {
        console.error('Error fetching user data', error);
        alert('Error fetching user data: ' + error.message);
      });
    }

  onMonthChange(event: any): void {
    const selectedMonth = event.target.value;
    this.fetchTicketSalesReport(selectedMonth);
  }

  exportToPDF(): void {
    const chartElement = document.getElementById('chart');
    const tableElement = document.getElementById('reportTable');
    const date = new Date().toLocaleDateString();
    const generatedBy = this.currentUserFullName; 
    
    if (chartElement && tableElement) {
      
      Promise.all([
        html2canvas(chartElement),
        html2canvas(tableElement)
      ]).then(([chartCanvas, tableCanvas]) => {
        const pdf = new jsPDF('p', 'mm', 'a4');
  
        
        pdf.setFontSize(18);
        pdf.text('Unsold Ticket Sales Report', 105, 20, { align: 'center' });
  
        pdf.setFontSize(12);
        pdf.text(`Date: ${date}`, 10, 30);
        pdf.text(`Generated by: ${generatedBy}`, 10, 35);
  
        
        const chartImgData = chartCanvas.toDataURL('image/png');
        const chartWidth = 180; 
        const chartHeight = (chartCanvas.height * chartWidth) / chartCanvas.width;
        pdf.addImage(chartImgData, 'PNG', 15, 40, chartWidth, chartHeight);
  
       
        const tableImgData = tableCanvas.toDataURL('image/png');
        const tableYPosition = 40 + chartHeight + 10; 
        const tableWidth = 180; 
        const tableHeight = (tableCanvas.height * tableWidth) / tableCanvas.width;
        pdf.addImage(tableImgData, 'PNG', 15, tableYPosition, tableWidth, tableHeight);
  
        pdf.save('UnsoldTicketSalesReport.pdf');
      }).catch(error => {
        console.error('Error generating PDF', error);
        alert('Error generating PDF: ' + error.message);
      });
    }
  }
  
  

  fetchTicketSalesReport(month: string = ''): void {
    this.ticketSalesReportService.getUnsoldTicketsReport(month).subscribe(
      (data: any[]) => {
        this.ticketSales = data;
        this.updateChartOptions(data);
      },
      (error) => {
        console.error('Error fetching ticket sales report', error);
        alert('Error fetching ticket sales report: ' + error.message); 
      }
    );
  }

  updateChartOptions(data: any[]): void {
    const categories = data.map(item => item.eventName);
    const seriesData = data.map(item => item.unsoldTickets);

    this.chartOptions = {
      ...this.chartOptions,
      series: [
        {
          name: "Unsold Tickets",
          data: seriesData
        }
      ],
      xaxis: {
        categories: categories,
        title: {
          text: 'Events'
        }
      },
      yaxis: {
        title: {
          text: 'Number of Tickets'
        },
        labels: {
          formatter: (value: number) => value.toString()  
        }
      }
    };
  }
}


